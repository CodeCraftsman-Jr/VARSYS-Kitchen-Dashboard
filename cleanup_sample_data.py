#!/usr/bin/env python3
"""
Sample Data Cleanup Utility
Removes sample data generated during testing
"""

import os
import sys
import shutil
from datetime import datetime

class DataCleanup:
    """Utility to clean up sample data"""
    
    def __init__(self):
        self.project_root = os.path.dirname(os.path.abspath(__file__))
        self.data_dir = os.path.join(self.project_root, 'data')
        self.tests_data_dir = os.path.join(self.project_root, 'tests', 'data')
        self.backup_dir = os.path.join(self.project_root, 'data_backup')
        
        # Sample data files generated by tests
        self.sample_data_files = [
            'inventory.csv',
            'shopping_list.csv', 
            'recipes.csv',
            'recipe_ingredients.csv',
            'meal_plan.csv',
            'sales.csv',
            'budget.csv',
            'waste.csv',
            'cleaning_maintenance.csv',
            'items.csv',
            'categories.csv',
            'pricing.csv',
            'packing_materials.csv',
            'recipe_packing_materials.csv',
            'sales_orders.csv'
        ]
        
        # Test-specific files that can be safely removed
        self.test_files = [
            'test_*.csv',
            'test_*.json',
            'test_*.txt',
            'sample_*.csv',
            'demo_*.csv'
        ]
        
    def show_menu(self):
        """Show cleanup options menu"""
        print("=" * 60)
        print("KITCHEN DASHBOARD - SAMPLE DATA CLEANUP")
        print("=" * 60)
        print()
        print("Choose cleanup option:")
        print()
        print("1. 🗑️  Remove ALL sample data (complete cleanup)")
        print("2. 📋 Remove specific data categories")
        print("3. 🔍 Show current data files")
        print("4. 💾 Backup data before cleanup")
        print("5. 🧪 Remove only test-generated files")
        print("6. 🔄 Reset to empty state (keep structure)")
        print("7. ❌ Cancel")
        print()
        
        choice = input("Enter your choice (1-7): ").strip()
        return choice
        
    def show_current_data(self):
        """Show current data files"""
        print("\n📁 Current Data Files:")
        print("-" * 40)
        
        if os.path.exists(self.data_dir):
            files = os.listdir(self.data_dir)
            if files:
                for file in sorted(files):
                    file_path = os.path.join(self.data_dir, file)
                    if os.path.isfile(file_path):
                        size = os.path.getsize(file_path)
                        print(f"  📄 {file} ({size:,} bytes)")
                    elif os.path.isdir(file_path):
                        print(f"  📁 {file}/")
            else:
                print("  (No files found)")
        else:
            print("  (Data directory does not exist)")
            
        if os.path.exists(self.tests_data_dir):
            print(f"\n📁 Test Data Files ({self.tests_data_dir}):")
            print("-" * 40)
            test_files = os.listdir(self.tests_data_dir)
            if test_files:
                for file in sorted(test_files):
                    file_path = os.path.join(self.tests_data_dir, file)
                    if os.path.isfile(file_path):
                        size = os.path.getsize(file_path)
                        print(f"  📄 {file} ({size:,} bytes)")
            else:
                print("  (No test files found)")
                
    def backup_data(self):
        """Create backup of current data"""
        if not os.path.exists(self.data_dir):
            print("❌ No data directory found to backup")
            return False
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{self.backup_dir}_{timestamp}"
        
        try:
            print(f"📦 Creating backup at: {backup_path}")
            shutil.copytree(self.data_dir, backup_path)
            print(f"✅ Backup created successfully!")
            return True
        except Exception as e:
            print(f"❌ Backup failed: {e}")
            return False
            
    def remove_all_sample_data(self):
        """Remove all sample data files"""
        print("\n🗑️  Removing ALL sample data...")
        print("-" * 40)
        
        removed_count = 0
        
        # Remove from main data directory
        if os.path.exists(self.data_dir):
            for filename in self.sample_data_files:
                file_path = os.path.join(self.data_dir, filename)
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        print(f"  ✅ Removed: {filename}")
                        removed_count += 1
                    except Exception as e:
                        print(f"  ❌ Failed to remove {filename}: {e}")
                        
        # Remove test data directory
        if os.path.exists(self.tests_data_dir):
            try:
                shutil.rmtree(self.tests_data_dir)
                print(f"  ✅ Removed test data directory")
                removed_count += 1
            except Exception as e:
                print(f"  ❌ Failed to remove test data directory: {e}")
                
        print(f"\n📊 Cleanup Summary: {removed_count} items removed")
        return removed_count > 0
        
    def remove_specific_categories(self):
        """Remove specific data categories"""
        categories = {
            '1': ('Inventory Data', ['inventory.csv', 'items.csv']),
            '2': ('Recipe Data', ['recipes.csv', 'recipe_ingredients.csv', 'pricing.csv']),
            '3': ('Sales Data', ['sales.csv', 'sales_orders.csv']),
            '4': ('Shopping Data', ['shopping_list.csv']),
            '5': ('Meal Planning', ['meal_plan.csv']),
            '6': ('Budget Data', ['budget.csv']),
            '7': ('Waste Tracking', ['waste.csv']),
            '8': ('Cleaning Tasks', ['cleaning_maintenance.csv']),
            '9': ('Packing Materials', ['packing_materials.csv', 'recipe_packing_materials.csv']),
            '10': ('Categories', ['categories.csv'])
        }
        
        print("\n📋 Select categories to remove:")
        print("-" * 40)
        for key, (name, files) in categories.items():
            print(f"{key}. {name} ({len(files)} files)")
            
        print("11. All categories")
        print("0. Cancel")
        
        choices = input("\nEnter category numbers (comma-separated): ").strip()
        
        if choices == '0':
            return False
            
        removed_count = 0
        
        if choices == '11':
            # Remove all categories
            for _, (name, files) in categories.items():
                for filename in files:
                    file_path = os.path.join(self.data_dir, filename)
                    if os.path.exists(file_path):
                        try:
                            os.remove(file_path)
                            print(f"  ✅ Removed: {filename}")
                            removed_count += 1
                        except Exception as e:
                            print(f"  ❌ Failed to remove {filename}: {e}")
        else:
            # Remove selected categories
            selected = [c.strip() for c in choices.split(',')]
            for choice in selected:
                if choice in categories:
                    name, files = categories[choice]
                    print(f"\n🗑️  Removing {name}...")
                    for filename in files:
                        file_path = os.path.join(self.data_dir, filename)
                        if os.path.exists(file_path):
                            try:
                                os.remove(file_path)
                                print(f"  ✅ Removed: {filename}")
                                removed_count += 1
                            except Exception as e:
                                print(f"  ❌ Failed to remove {filename}: {e}")
                                
        print(f"\n📊 Cleanup Summary: {removed_count} files removed")
        return removed_count > 0
        
    def remove_test_files_only(self):
        """Remove only test-generated files"""
        print("\n🧪 Removing test-generated files only...")
        print("-" * 40)
        
        removed_count = 0
        
        # Remove test data directory
        if os.path.exists(self.tests_data_dir):
            try:
                shutil.rmtree(self.tests_data_dir)
                print(f"  ✅ Removed test data directory")
                removed_count += 1
            except Exception as e:
                print(f"  ❌ Failed to remove test data directory: {e}")
                
        # Remove test report files
        for file in os.listdir(self.project_root):
            if file.startswith('test_report_') and file.endswith('.txt'):
                try:
                    os.remove(os.path.join(self.project_root, file))
                    print(f"  ✅ Removed: {file}")
                    removed_count += 1
                except Exception as e:
                    print(f"  ❌ Failed to remove {file}: {e}")
                    
        print(f"\n📊 Cleanup Summary: {removed_count} items removed")
        return removed_count > 0
        
    def reset_to_empty_state(self):
        """Reset to empty state but keep directory structure"""
        print("\n🔄 Resetting to empty state...")
        print("-" * 40)
        
        # Create empty data directory
        os.makedirs(self.data_dir, exist_ok=True)
        
        # Remove all CSV files but keep directory structure
        removed_count = 0
        
        if os.path.exists(self.data_dir):
            for item in os.listdir(self.data_dir):
                item_path = os.path.join(self.data_dir, item)
                if os.path.isfile(item_path) and item.endswith('.csv'):
                    try:
                        os.remove(item_path)
                        print(f"  ✅ Removed: {item}")
                        removed_count += 1
                    except Exception as e:
                        print(f"  ❌ Failed to remove {item}: {e}")
                        
        # Remove test data
        if os.path.exists(self.tests_data_dir):
            try:
                shutil.rmtree(self.tests_data_dir)
                print(f"  ✅ Removed test data directory")
                removed_count += 1
            except Exception as e:
                print(f"  ❌ Failed to remove test data directory: {e}")
                
        # Create empty CSV files with headers only
        self.create_empty_data_files()
        
        print(f"\n📊 Reset Summary: {removed_count} items removed, empty files created")
        return True
        
    def create_empty_data_files(self):
        """Create empty CSV files with headers"""
        empty_files = {
            'inventory.csv': 'item_id,item_name,category,quantity,unit,price_per_unit,location,expiry_date,reorder_level',
            'recipes.csv': 'recipe_id,recipe_name,category,servings,prep_time,cook_time,description',
            'sales.csv': 'sale_id,item_name,quantity,price_per_unit,total_amount,customer,date',
            'shopping_list.csv': 'item_id,item_name,category,quantity,unit,priority,status',
            'categories.csv': 'category_id,category_name,description'
        }
        
        for filename, header in empty_files.items():
            file_path = os.path.join(self.data_dir, filename)
            try:
                with open(file_path, 'w') as f:
                    f.write(header + '\n')
                print(f"  📄 Created empty: {filename}")
            except Exception as e:
                print(f"  ❌ Failed to create {filename}: {e}")
                
    def run(self):
        """Run the cleanup utility"""
        while True:
            choice = self.show_menu()
            
            if choice == '1':
                # Remove all sample data
                confirm = input("\n⚠️  This will remove ALL sample data. Continue? (y/N): ").strip().lower()
                if confirm == 'y':
                    self.remove_all_sample_data()
                else:
                    print("❌ Cancelled")
                    
            elif choice == '2':
                # Remove specific categories
                self.remove_specific_categories()
                
            elif choice == '3':
                # Show current data
                self.show_current_data()
                input("\nPress Enter to continue...")
                continue
                
            elif choice == '4':
                # Backup data
                self.backup_data()
                
            elif choice == '5':
                # Remove test files only
                self.remove_test_files_only()
                
            elif choice == '6':
                # Reset to empty state
                confirm = input("\n⚠️  This will reset all data to empty state. Continue? (y/N): ").strip().lower()
                if confirm == 'y':
                    self.reset_to_empty_state()
                else:
                    print("❌ Cancelled")
                    
            elif choice == '7':
                # Cancel
                print("❌ Cleanup cancelled")
                break
                
            else:
                print("❌ Invalid choice. Please try again.")
                continue
                
            # Ask if user wants to continue
            if choice in ['1', '2', '4', '5', '6']:
                continue_choice = input("\nDo you want to perform another cleanup operation? (y/N): ").strip().lower()
                if continue_choice != 'y':
                    break
                    
        print("\n✅ Cleanup utility finished!")

def main():
    """Main function"""
    cleanup = DataCleanup()
    cleanup.run()

if __name__ == "__main__":
    main()
